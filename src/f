import * as React from "react";
import {
  AppBar,
  Avatar,
  Box,
  Button,
  IconButton,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Paper,
  Stack,
  Tab,
  Tabs,
  Toolbar,
  Tooltip,
  Typography,
} from "@mui/material";
import DashboardIcon from "@mui/icons-material/Home";
import PeopleIcon from "@mui/icons-material/People";
import WhatshotIcon from "@mui/icons-material/Whatshot";
import SearchIcon from "@mui/icons-material/Search";
import ChatBubbleOutlineIcon from "@mui/icons-material/ChatBubbleOutline";
import NotificationsNoneIcon from "@mui/icons-material/NotificationsNone";
import CloseIcon from "@mui/icons-material/Close";

import DashboardLite from "./DashboardLite";
import AdressePage from "./AdressePage";

type TabKey = "dashboard" | "adressen" | "schaeden";

type TabItem = {
  key: TabKey;
  label: string;
  element: React.ReactNode;
};

function Schaeden() {
  return (
    <Box p={2}>
      <Typography variant="h6">Schäden</Typography>
      <Typography variant="body2">Platzhalter-Komponente.</Typography>
    </Box>
  );
}

export default function App() {
  const initial: TabItem = {
    key: "dashboard",
    label: "Dashboard",
    element: <DashboardLite />,
  };

  const [tabs, setTabs] = React.useState<TabItem[]>([initial]);
  const [activeKey, setActiveKey] = React.useState<TabKey>("dashboard");

  const openTab = (key: TabKey) => {
    const exists = tabs.find((t) => t.key === key);
    if (exists) {
      setActiveKey(key);
      return;
    }
    const next: TabItem =
      key === "adressen"
        ? { key, label: "Adressen", element: <AdressePage navigateToHome={() => openTab("dashboard")} /> }
        : key === "schaeden"
        ? { key, label: "Schäden", element: <Schaeden /> }
        : { key, label: "Dashboard", element: <DashboardLite /> };

    setTabs((prev) => [...prev, next]);
    setActiveKey(key);
  };

  const closeTab = (key: TabKey) => {
    if (tabs.length === 1) return; // keep at least one tab
    const nextTabs = tabs.filter((t) => t.key !== key);
    setTabs(nextTabs);
    if (activeKey === key) setActiveKey(nextTabs[nextTabs.length - 1].key);
  };

  const activeIndex = Math.max(0, tabs.findIndex((t) => t.key === activeKey));

  return (
    <Box display="flex" flexDirection="column" minHeight="100vh">
      {/* Top bar */}
      <AppBar position="static" color="transparent" elevation={0}>
        <Toolbar>
          <Avatar>MC</Avatar>
          <Box ml={2}>
            <Typography variant="body1">MeinUnternehmen</Typography>
          </Box>
          <Box flexGrow={1} />
          <Tooltip title="Suche"><IconButton><SearchIcon /></IconButton></Tooltip>
          <Button variant="contained" size="small">Matt AI</Button>
          <Tooltip title="Nachrichten"><IconButton><ChatBubbleOutlineIcon /></IconButton></Tooltip>
          <Tooltip title="Benachrichtigungen"><IconButton><NotificationsNoneIcon /></IconButton></Tooltip>
          <Avatar />
        </Toolbar>
      </AppBar>

      {/* Tabs */}
      <Paper square>
        <Tabs
          value={activeIndex}
          onChange={(_, idx: number) => setActiveKey(tabs[idx].key)}
          variant="scrollable"
          scrollButtons="auto"
        >
          {tabs.map((t) => (
            <Tab
              key={t.key}
              label={
                <Stack direction="row" alignItems="center" spacing={1}>
                  <span>{t.label}</span>
                  <IconButton
                    size="small"
                    onMouseDown={(e) => e.stopPropagation()}
                    onClick={(e) => {
                      e.stopPropagation();
                      closeTab(t.key);
                    }}
                  >
                    <CloseIcon fontSize="small" />
                  </IconButton>
                </Stack>
              }
            />
          ))}
        </Tabs>
      </Paper>

      {/* Main area: left menu + content that always fills height */}
      <Stack direction="row" flexGrow={1} minHeight={0}>
        {/* Left menu */}
        <Paper square>
          <List>
            <ListItemButton
              selected={activeKey === "dashboard"}
              onClick={() => openTab("dashboard")}
            >
              <ListItemIcon><DashboardIcon /></ListItemIcon>
              <ListItemText primary="Dashboard" />
            </ListItemButton>
            <ListItemButton
              selected={activeKey === "adressen"}
              onClick={() => openTab("adressen")}
            >
              <ListItemIcon><PeopleIcon /></ListItemIcon>
              <ListItemText primary="Adressen" />
            </ListItemButton>
            <ListItemButton
              selected={activeKey === "schaeden"}
              onClick={() => openTab("schaeden")}
            >
              <ListItemIcon><WhatshotIcon /></ListItemIcon>
              <ListItemText primary="Schäden" />
            </ListItemButton>
          </List>
        </Paper>

        {/* Right content pane (fills remaining height even if page is short) */}
        <Box flexGrow={1} display="flex" flexDirection="column" minWidth={0} minHeight={0}>
          {tabs.map((t, idx) =>
            idx === activeIndex ? (
              <Box
                key={t.key}
                flexGrow={1}
                display="flex"
                flexDirection="column"
                minHeight="100%"
                width="100%"
              >
                {t.element}
              </Box>
            ) : null
          )}
        </Box>
      </Stack>
    </Box>
  );
}
